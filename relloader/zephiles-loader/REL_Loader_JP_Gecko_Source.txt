# Original code created by PistonMiner and Zephiles for Paper Mario: The Thousand-Year Door
# Code ported to Super Monkey Ball 2 by Zephiles

# 80006cdc - Address to hook for this code

# Set global function/variable/offset locations/values
.set ARENA_LOW_OFFSET,-0x7f58
.set memset,0x800033a8
.set INTERNAL_FILENAME_LOCATION,0x800044c0
.set OSAllocFromArenaLow,0x8000d628
.set DCFlushRange,0x8000d94c
.set OSLink,0x800106f4
.set OSUnlink,0x80010b50
.set __CARDGetControlBlock,0x80022fc0
.set __CARDPutControlBlock,0x80023078
.set CARDGetResultCode,0x800230dc
.set CARDProbeEx,0x80025e14
.set CARDMountAsync,0x800264a8
.set CARDOpen,0x800271f4
.set CARDReadAsync,0x800279ac
.set CARDUnmount,0x800266e4

# Make sure mkb2.main_game.rel was the REL file that was just loaded
lwz r3,0(r31) # Pointer to the Main Loop's Module
lwz r3,0(r3) # Main Loop's Module Id
cmpwi r3,0x1
bne+ exit

# Initialize static values used for addresses
# Do not overwrite r31
lis r30,0x8002
lis r29,0x8001
lis r28,0x8000

li r27,0 # Used to check if a REL file is loaded or not

# Check if a memory card is present
# To avoid an infinite loop, only check for a memory card a set amount of times
lis r26,0x000f
ori r26,r26,0x4240 # Check 1,000,000 times

checkForMemoryCardLoop:
ori r3,r30,CARDProbeEx@l
mtctr r3
li r3,1 # Memory card slot B
li r4,0 # Pointer to the memory size (not needed, so NULL)
li r5,0 # Pointer to the sector size (not needed, so NULL)
bctrl
cmpwi r3,-1 # CARD_RESULT_BUSY
bne- exitCheckForMemoryCardLoop

# Exit if the limit has been reached
subic. r26,r26,1
bgt+ checkForMemoryCardLoop

exitCheckForMemoryCardLoop:
cmpwi r3,0 # Check if something went wrong
bne- exit

# Back up the current Arena Low
lwz r25,ARENA_LOW_OFFSET(r13)

# Allocate memory for the CARDMount work area, CardFileInfo, 
# and the initial 0x200 bytes for reading from the memory card
ori r3,r27,0xa220
bl allocateFromArenaLow

# Backup the returned address to be used for later
mr r26,r3

# Mount the Memory Card
ori r3,r30,CARDMountAsync@l
mtctr r3
li r3,1 # Memory Card Slot B
addi r4,r26,0x220 # Pointer to the Work Area
li r5,0 # Detach Callback function (Want to avoid using, so NULL)
li r6,0 # Attach Callback function (Want to avoid using, so NULL)
bctrl
bl finishAsyncFunction
cmpwi r3,0 # Check if something went wrong
bne- freeMemory

# Open the file
ori r3,r30,CARDOpen@l
mtctr r3
li r3,1 # Memory Card Slot B
ori r4,r28,INTERNAL_FILENAME_LOCATION@l
mr r5,r26 # Pointer to CardFileInfo
bctrl
cmpwi r3,0 # Check if something went wrong
bne- unmountCard

# Read from the Card
ori r3,r30,CARDReadAsync@l
mtctr r3
mr r3,r26 # Pointer to CardFileInfo
addi r4,r26,0x20 # Pointer to the File Buffer
li r5,0x200 # Amount of bytes to read
li r6,0x2000 # Offset in the file to start reading from
li r7,0 # Read Callback function (Want to avoid using, so NULL)
bctrl
bl finishAsyncFunction
cmpwi r3,0 # Check if something went wrong
bne- closeCard

# Get the file size and adjust it to be in multiples of 0x200 bytes
lwz r24,0x60(r26) # File Size
addi r24,r24,511
rlwinm r24,r24,0,0,22

# Get the pointer to the Main Loop's Relocation Data location
lwz r23,0(r31) # Pointer to the Main Loop's Module
lwz r23,0x24(r23) # Pointer to the Main Loop's Relocation Data

# Round the pointer to the Relocation Data up to the nearest multiple of 0x20 bytes
addi r23,r23,31
rlwinm r23,r23,0,0,26

# Allocate memory based on the adjusted file size
mr r3,r24 # File Size
bl allocateFromMainLoopRelocMemory

# Backup the returned address to be used for later
mr r22,r3

# Read the REL Area of the file
ori r3,r30,CARDReadAsync@l
mtctr r3
mr r3,r26 # Pointer to CardFileInfo
mr r4,r22 # Pointer to the File Buffer
mr r5,r24 # Adjusted File Size
li r6,0x2200 # Offset in the file to start reading from
li r7,0 # Read Callback Function (Want to avoid using, so NULL)
bctrl
bl finishAsyncFunction
cmpwi r3,0 # Check if something went wrong
bne- closeCard

# Get the BSS Area size and allocate memory for it
lwz r3,0x20(r22)
bl allocateFromMainLoopRelocMemory

# Backup the returned address to be used for later
mr r21,r3

# Link the functions in the REL
ori r3,r29,OSLink@l
mtctr r3
mr r3,r22 # Pointer to the Module
mr r4,r21 # Pointer to the BSS Area
bctrl
cmpwi r3,1 # Check if something went wrong
bne- callOSUnlink

# Store the Main Loop's Module, the Main Loop BSS Area, the Main Loop's Relocation Data
# size, the next free spot in Relocation Data, the BSS Area, and the REL Module
lwz r3,0(r31) # Pointer to the Main Loop's Module
stw r3,0x4524(r28)
lwz r3,0x4(r31) # Pointer to the Main Loop's BSS Area
stw r3,0x4528(r28)
stw r23,0x452c(r28) # Pointer to the Main Loop's Relocation Data
stw r21,0x4530(r28) # Pointer to the BSS Area
stw r22,0x4534(r28) # Pointer to the Module

# Get the REL Prolog Pointer
lwz r27,0x34(r22)

# Done, so close and unmount the card
b closeCard

allocateFromMainLoopRelocMemory:
stwu sp,-0x10(sp)
mflr r0
stw r0,0x14(sp)
stmw r30,0x8(sp)

addi r4,r3,31
rlwinm r4,r4,0,0,26 # Round the size up to the nearest multiple of 0x20 bytes
mr r31,r4 # Size
mr r3,r23 # Pointer to the Main Loop's Relocation Data

# Set the next free spot in the Main Loop's Relocation Data
add r23,r23,r4

clearAndFlushMemory:
ori r5,r28,memset@l
mtctr r5
mr r30,r3 # Dest
li r4,0
mr r5,r31 # Size
bctrl

# Flush the memory
ori r3,r28,DCFlushRange@l
mtctr r3
mr r3,r30 # Dest
mr r4,r31 # Size
bctrl
mr r3,r30 # Dest

lmw r30,0x8(sp)
lwz r0,0x14(sp)
mtlr r0
addi sp,sp,0x10
blr

allocateFromArenaLow:
stwu sp,-0x10(sp)
mflr r0
stw r0,0x14(sp)
stmw r30,0x8(sp)

ori r4,r28,OSAllocFromArenaLow@l
mtctr r4
addi r3,r3,31
rlwinm r3,r3,0,0,26 # Round the size up to the nearest multiple of 0x20 bytes
mr r31,r3 # Size
li r4,32 # Alignment
bctrl

# Clear and flush the allocated memory
b clearAndFlushMemory

finishAsyncFunction:
cmpwi r3,0 # Check if something went wrong
bnelr-
mflr r14

finishAsyncFunctionLoop:
ori r3,r30,CARDGetResultCode@l
mtctr r3
li r3,1 # Memory Card Slot B
bctrl
cmpwi r3,-1 # CARD_RESULT_BUSY
beq+ finishAsyncFunctionLoop
mtlr r14
blr

CARDClose:
mflr r0
stw r0,0x4(sp)
stwu sp,-0x18(sp)
stw r31,0x14(sp)
mr r31,r3

ori r3,r30,__CARDGetControlBlock@l
mtctr r3
addi r4,sp,0xc
lwz r3,0(r31)
bctrl

cmpwi r3,0
bge- noProblemsFound
b exitCloseCard

noProblemsFound:
ori r3,r30,__CARDPutControlBlock@l
mtctr r3
li r0,-1
stw r0,0(r31)
li r4,0
lwz r3,0xc(sp)
bctrl

exitCloseCard:
lwz r0,0x1c(sp)
lwz r31,0x14(sp)
addi sp,sp,0x18
mtlr r0
blr

callOSUnlink:
ori r3,r29,OSUnlink@l
mtctr r3
mr r3,r22 # Pointer to the Module
bctrl

closeCard:
mr r3,r26 # Pointer to CardFileInfo
bl CARDClose

unmountCard:
ori r3,r30,CARDUnmount@l
mtctr r3
li r3,1 # Memory Card Slot B
bctrl

freeMemory:
# Restore the Arena Low
stw r25,ARENA_LOW_OFFSET(r13)

# Run the REL Prolog if the load was successful
cmpwi r27,0
beq- exit
mtctr r27
bctrl

exit:
# Restore the overwritten instruction
lwz r3,0(r31) # Pointer to the Main Loop's Module
